import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Queue;
import java.util.Random;
import java.util.Map;
/*
 * JAMES GREEN
 * CS 251-001 INTERMEDIATE PROJGRAMMING
 * String Chain Object
 */
public class StringChain
{
  private int ORDER;
  LinkedList<String> prefix;
  LinkedList<String> outPrefix;
  Map<LinkedList<String>, LinkedList<String>> Map = new HashMap<LinkedList<String>, LinkedList<String>>();

  StringChain(int order)
  {
    prefix = new LinkedList<String>();
    for (int i = 0; i < order; i++)
    {
      prefix.add(null);
    }
  }

  /*
   * Takes in an iterator in the form of a Scanner from the main program. Using
   * pre-made List of size <order>: Gets next item, maps current prefix list to
   * the suffix item, adds the item to prefix list
   */
  public void addItems(Iterator<String> itemIter)
  {
    LinkedList<String> suffixList;
    while (itemIter.hasNext())
    {
      String next = itemIter.next();
      suffixList = (Map.get(prefix) == null) ? new LinkedList<String>() : Map
          .get(prefix);
      suffixList.add(next);
      Map.put(prefix, suffixList);
      prefix.removeFirst();
      prefix.addLast(next);
    }
    /*
     * Adds the terminating file NULL characters to the map as well
     */
    for (int i = 0; i < prefix.size(); i++)
    {
      suffixList = (Map.get(prefix) == null) ? new LinkedList<String>() : Map
          .get(prefix);
      suffixList.add(null);
      Map.put(prefix, suffixList);
      prefix.removeFirst();
      prefix.addLast(null);
    }
  }

  /*
   * Creates and returns an ArrayList of strings for the main program to print
   * out. Has amount of objects 'n' inside of the Array
   */
  public List<String> generate(int n, Random rand)
  {
    /*
     * Removes all objects currently in Prefix just just in case
     */
    LinkedList<String> possSuffix = new LinkedList<String>();
    for (int i = 0; i < prefix.size(); i++)
    {
      prefix.removeFirst();
      prefix.addLast(null);
    }
    List<String> output = new ArrayList<String>();
    /*
     * Takes suffix list from the map and rolls through each occurrence. Sort of
     * wastes memory but is clearer in function I believe
     */
    for (n = n; n > 0; n--)
    {
      possSuffix = Map.get(prefix);
      int q;
      if (possSuffix != null)
      {
        q = rand.nextInt(possSuffix.size());
        String suffix = possSuffix.get(q);
        if (possSuffix.get(q) != null)
        {
          output.add(possSuffix.get(q));
        }
        prefix.removeFirst();
        prefix.addLast(suffix);
      } else
      {
        prefix.removeFirst();
        prefix.addLast(null);
      }
    }
    return output;
  }
}
